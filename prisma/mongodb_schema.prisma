// MongoDB Prisma Schema with auto() function

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

// MongoDB specific models using auto() function

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @unique @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String?
  lastName  String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  published   Boolean   @default(false)
  authorId    String    @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  tags        String[]
  metadata    Json?
  viewCount   Int       @default(0)
  likeCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId  String?  @db.ObjectId
  replies   Comment[] @relation("CommentReplies")
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String?
  slug        String @unique
  parentId    String? @db.ObjectId
  children    Category[] @relation("CategoryHierarchy")
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postCount   Int    @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Analytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  entityType  String   // "post", "user", "comment"
  entityId    String   @db.ObjectId
  event       String   // "view", "like", "share", "click"
  sessionId   String?
  userId      String?  @db.ObjectId
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  timestamp   DateTime @default(now())
  
  @@index([entityType, entityId])
  @@index([event])
  @@index([timestamp])
}

model Setting {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  key         String @unique
  value       Json
  description String?
  isPublic    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}